@using Forum.Entities;
@model List<ApplicationUser>

@{
    ViewData["Title"] = "User Management";

    @* Defining pagination variables here so we get the correct type and also don't have to type ViewBag to access them every time. *@
    int totalItems = ViewBag.totalItems;
    int itemsPerPage = ViewBag.itemsPerPage;
    int currentPage = ViewBag.currentPage;
    int totalPages = ViewBag.totalPages;
    int previous = ViewBag.previous;
    int next = ViewBag.next;
}

@section ForumNavigation
{
    > <a class="navLinks" asp-controller="Admin" asp-action="Index">Admin</a>
    &nbsp;> <a class="navLinks" asp-controller="Admin" asp-action="UserManagement">Users</a>
}

<br>

@if (Model.Any())
{
    @foreach (var user in @Model)
    {
        <div class="row postRow">
            <div class="col-2">#@user.Id</div>
            <div class="col-4">
                <a class="navLinks" asp-controller="Forum" asp-action="UserInformation" asp-route-id="@user.Id">@user.Username</a>
            </div>
            <div class="col-2">
                <a class="navLinks" asp-controller="Admin" asp-action="EditUser" asp-route-id="@user.Id">Edit</a>
            </div>
        </div>
    }
    <br><br>
    <div class="pagination">
        @*Previous*@
        @if (previous < 1)
        {
            // If previous page is less than 1, then it doesn't exist, so don't display link.
            // This also ensures that it doesn't display if there is only 1 page (pagination bar isn't shown).
        }
        else if (previous == 1)
        {
            // If previous is 1, it is the default (first) page, so display link to UserManagement page without page variable.
            <a asp-controller="Admin" asp-action="UserManagement">&laquo;</a>
        }
        else
        {
            // Otherwise, display the previous icon, which links to page = previous.
            <a asp-controller="Admin" asp-action="UserManagement" asp-route-page="@previous">&laquo;</a>
        }

        @*Pages*@
        @* Only display links if there is more than 1 page *@
        @if (totalPages > 1)
        {
            // when an anchor tags class=active, its number is highlighted so signify that we are on that page.
            // declare variable here so it has scope in this whole if block.
            string activeClass = "";

            // If we are on the default (first) page, set the activeClass string to active.
            if (currentPage == 1)
            {
                activeClass = "active";
            }
            else
            {
                activeClass = "";
            }

            // For the default (first) page, display link to UserManagement page without page variable.
            <a class=@activeClass asp-controller="Admin" asp-action="UserManagement">1</a>

            // For the rest of the pages (we've already done page 1, so we start with index = 2), loop through and display the links, with the difference here being we now add asp-route-page, because the page will not be the default page 1.
            @for (int i = 2; i <= totalPages; i++)
            {
                // If the index is the current page, set the activeClass string to active.
                if (currentPage == i)
                {
                    activeClass = "active";
                }
                else
                {
                    activeClass = "";
                }

                // asp-route-page links to what the current index is.
                <a class=@activeClass asp-controller="Admin" asp-action="UserManagement" asp-route-page="@i">@i</a>
            }
        }

        @*Next*@
        @if (next > totalPages)
        {
            // If next page is greater than totalPages, then it doesn't exist, so don't display link.
        } else
        {
            // Otherwise, display the next icon, which links to page = next.
            <a asp-controller="Admin" asp-action="UserManagement" asp-route-page="@next">&raquo;</a>
        }
    </div>
}
else
{
    <p>There are no users to display.</p>
}